# Convolver sink
#
# start with pipewire -c filter-chain/sink-convolver.conf
#
context.properties = {
    log.level        = 0
}

context.spa-libs = {
    audio.convert.* = audioconvert/libspa-audioconvert
    support.*       = support/libspa-support
}

context.modules = [
    {   name = libpipewire-module-rtkit
        args = {
            #nice.level   = -11
            #rt.prio      = 88
            #rt.time.soft = 2000000
            #rt.time.hard = 2000000
        }
        flags = [ ifexists nofail ]
    }
    {   name = libpipewire-module-protocol-native }
    {   name = libpipewire-module-client-node }
    {   name = libpipewire-module-adapter }

    {   name = libpipewire-module-filter-chain
        args = {
            node.name = "effect_output.convolver"
            node.description = "Convolver Sink"
            media.name = "Convolver Sink"
            filter.graph = {
                nodes = [
                    {
                        type = builtin
                        label = convolver
                        name = convFL
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 0
			}
                    }
                    {
                        type = builtin
                        label = convolver
                        name = convFR
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 4
			}
		    }
                    {
                        type = builtin
                        label = convolver
                        name = convFC
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 2
			}
                    }
                    {
                        type = builtin
                        label = convolver
                        name = convLFE
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 3
			}
                    }
                    {
                        type = builtin
                        label = convolver
                        name = convSL
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 1
			}
                    }
                    {
                        type = builtin
                        label = convolver
                        name = convSR
			config = {
			   filename = "hrir_kemar/hrir-kemar.wav"
			   channel = 5
			}
                    }
                    {
                        type = builtin
                        label = mixer
                        name = mix1L
                    }
                    {
                        type = builtin
                        label = mixer
                        name = mix1R
                    }
                    {
                        type = builtin
                        label = mixer
                        name = mixC
                    }
                    {
                        type = builtin
                        label = mixer
                        name = mix2L
                    }
                    {
                        type = builtin
                        label = mixer
                        name = mix2R
                    }
                ]
		links = [
                    { output = "convFL:Out" input = "mix1L:In 1" }
                    { output = "convSL:Out" input = "mix1L:In 2" }

                    { output = "convFR:Out" input = "mix1R:In 1" }
                    { output = "convSR:Out" input = "mix1R:In 2" }

                    { output = "convFC:Out" input = "mixC:In 1" }
                    { output = "convLFE:Out" input = "mixC:In 2" }

                    { output = "mixC:Out" input = "mix2L:In 1" }
                    { output = "mix1L:Out" input = "mix2L:In 2" }

                    { output = "mixC:Out" input = "mix2R:In 1" }
                    { output = "mix1R:Out" input = "mix2R:In 2" }
                ]
                inputs = [ "convFL:In" "convFR:In" "convFC:In" "convLFE:In" "convSL:In" "convSR:In" ]
                outputs = [ "mix2L:Out" "mix2R:Out" ]

            }
            capture.props = {
                media.class = Audio/Sink
                audio.channels = 6
                audio.position = [ FL FR FC LFE SL SR]
            }
            playback.props = {
                node.passive = true
                audio.channels = 2
                audio.position = [ FL FR ]
            }
        }
    }
]
